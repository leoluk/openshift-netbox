---

apiVersion: v1
kind: Template
labels:
  app: netbox
  template: netbox
metadata:
  name: netbox
  template.openshift.io/bindable: "false"

parameters:
- displayName: Name
  name: NAME
  required: true
  value: netbox
- displayName: Git Remote
  name: GIT_REMOTE
  required: true
  value: https://github.com/digitalocean/netbox
- displayName: Git Reference
  name: GIT_REF
  required: true
  value: v2.5.12
- displayName: Public FQDN
  name: FQDN
  required: true
- description: Set this to a long random string.
  displayName: Django Secret Key
  from: '[\w]{50}'
  generate: expression
  name: DJANGO_SECRET_KEY
- description: Username for PostgreSQL user that will be used for accessing the database.
  displayName: PostgreSQL Connection Username
  value: netbox
  name: POSTGRESQL_USER
  required: true
- description: Password for the PostgreSQL connection user.
  displayName: PostgreSQL Connection Password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: POSTGRESQL_PASSWORD
  required: true
- description: Name of the PostgreSQL database accessed.
  displayName: PostgreSQL Database Name
  name: POSTGRESQL_DATABASE
  required: true
  value: sampledb
- description: Volume space available for data, e.g. 512Mi, 2Gi.
  displayName: Volume Capacity
  name: VOLUME_CAPACITY
  required: true
  value: 1Gi
- description: Maximum amount of memory the database container can use.
  displayName: Database Memory Limit
  name: MEMORY_LIMIT
  required: true
  value: 512Mi
- description: Version of PostgreSQL image to be used (9.4, 9.5, 9.6 or latest).
  displayName: Version of PostgreSQL Image
  name: POSTGRESQL_VERSION
  required: true
  value: "9.6"

objects:

#------------------------------------------------- Django

- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: ${NAME}-media
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 1Gi

- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: ${NAME}-config
  data:
    settings.py: |
      import os

      LOGIN_REQUIRED = True

      ALLOWED_HOSTS = ['${FQDN}']

      SECRET_KEY = os.getenv('DJANGO_SECRET_KEY')

      MEDIA_ROOT = '/opt/app-root/media'

      DATABASE = {
          'NAME': os.getenv('DATABASE_NAME'),
          'USER': os.getenv('DATABASE_USER'),
          'PASSWORD': os.getenv('DATABASE_PASSWORD'),
          'HOST': os.getenv('DATABASE_SERVICE_HOST'),
          'PORT': os.getenv('DATABASE_SERVICE_PORT'),
      }

- apiVersion: v1
  kind: Secret
  metadata:
    name: ${NAME}
  stringData:
    django-secret-key: ${DJANGO_SECRET_KEY}

- apiVersion: v1
  kind: BuildConfig
  metadata:
    name: ${NAME}
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: ${NAME}:latest
    postCommit: {}
    runPolicy: Serial
    source:
      git:
        ref: ${GIT_REF}
        uri: ${GIT_REMOTE}
      type: Git
    strategy:
      sourceStrategy:
        env:
        - name: APP_HOME
          value: netbox
        - name: APP_MODULE
          value: netbox.wsgi
        from:
          kind: ImageStreamTag
          name: ${NAME}-base:latest
      type: Source
    triggers:
    - imageChange: {}
      type: ImageChange
    - type: ConfigChange

- apiVersion: v1
  kind: ImageStream
  metadata:
    name: ${NAME}

- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: ${NAME}
  spec:
    replicas: 1
    selector:
      deploymentconfig: ${NAME}
    strategy:
      type: Recreate
      recreateParams:
        timeoutSeconds: 600
    template:
      metadata:
        labels:
          app: ${NAME}
          deploymentconfig: ${NAME}
      spec:
        containers:
        - env:
          - name: DATABASE_SERVICE_HOST
            value: ${NAME}-db
          - name: DATABASE_SERVICE_PORT
            value: "5432"
          - name: NETBOX_DEBUG
            value: "False"
          - name: DJANGO_SECRET_KEY
            valueFrom:
              secretKeyRef:
                key: django-secret-key
                name: ${NAME}
          - name: DATABASE_NAME
            valueFrom:
              secretKeyRef:
                key: database-name
                name: ${NAME}-db
          - name: DATABASE_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: ${NAME}-db
          - name: DATABASE_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: ${NAME}-db
          name: ${NAME}
          ports:
          - containerPort: 8080
            protocol: TCP
          volumeMounts:
          - name: config
            mountPath: /opt/app-root/src/netbox/netbox/configuration.py
            subPath: settings.py
          - name: media
            mountPath: /opt/app-root/media
        restartPolicy: Always
        volumes:
        - name: config
          configMap:
            name: ${NAME}-config
        - name: media
          persistentVolumeClaim:
            claimName: ${NAME}-media
        serviceAccountName: ${NAME}
    test: false
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${NAME}
        from:
          kind: ImageStreamTag
          name: ${NAME}:latest
      type: ImageChange
    - type: ConfigChange

- apiVersion: v1
  kind: Route
  metadata:
    name: ${NAME}
  spec:
    host: ${FQDN}
    port:
      targetPort: webserver
    tls:
      termination: edge
    to:
      kind: Service
      name: ${NAME}
      weight: 100
    wildcardPolicy: None

- apiVersion: v1
  kind: Service
  metadata:
    name: ${NAME}
  spec:
    ports:
    - name: webserver
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      deploymentconfig: ${NAME}
    type: ClusterIP

- apiVersion: v1
  kind: ServiceAccount
  metadata:
    annotations:
      serviceaccounts.openshift.io/oauth-redirectreference.first: >
        {"kind": "OAuthRedirectReference", "apiVersion": "v1", "reference": {"kind": "Route", "name": "${NAME}"}}
    name: ${NAME}

#------------------------------------------------- Database

- apiVersion: v1
  kind: Secret
  metadata:
    annotations:
      template.openshift.io/expose-database_name: '{.data[''database-name'']}'
      template.openshift.io/expose-password: '{.data[''database-password'']}'
      template.openshift.io/expose-username: '{.data[''database-user'']}'
    name: ${NAME}-db
  stringData:
    database-name: ${POSTGRESQL_DATABASE}
    database-password: ${POSTGRESQL_PASSWORD}
    database-user: ${POSTGRESQL_USER}

- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      template.openshift.io/expose-uri: postgres://{.spec.clusterIP}:{.spec.ports[?(.name=="postgresql")].port}
    name: ${NAME}-db
  spec:
    ports:
    - name: postgresql
      nodePort: 0
      port: 5432
      protocol: TCP
      targetPort: 5432
    selector:
      name: ${NAME}-db
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}

- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: ${NAME}-db
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: ${VOLUME_CAPACITY}

- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      template.alpha.openshift.io/wait-for-ready: "true"
    name: ${NAME}-db
  spec:
    replicas: 1
    selector:
      name: ${NAME}-db
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          name: ${NAME}-db
      spec:
        containers:
        - capabilities: {}
          env:
          - name: POSTGRESQL_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: ${NAME}-db
          - name: POSTGRESQL_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: ${NAME}-db
          - name: POSTGRESQL_DATABASE
            valueFrom:
              secretKeyRef:
                key: database-name
                name: ${NAME}-db
          image: ' '
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - /usr/libexec/check-container
              - --live
            initialDelaySeconds: 120
            timeoutSeconds: 10
          name: postgresql
          ports:
          - containerPort: 5432
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /usr/libexec/check-container
            initialDelaySeconds: 5
            timeoutSeconds: 1
          resources:
            limits:
              memory: ${MEMORY_LIMIT}
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /var/lib/pgsql/data
            name: ${NAME}-db-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        volumes:
        - name: ${NAME}-db-data
          persistentVolumeClaim:
            claimName: ${NAME}-db
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - postgresql
        from:
          kind: ImageStreamTag
          name: postgresql:${POSTGRESQL_VERSION}
          namespace: openshift
        lastTriggeredImage: ""
      type: ImageChange
    - type: ConfigChange
  status: {}
